[gd_scene load_steps=8 format=2]

[sub_resource type="QuadMesh" id=1]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, unshaded, shadows_disabled;
uniform vec4 albedo : hint_color;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

//  Function from Iñigo Quiles
//  www.iquilezles.org/www/articles/functions/functions.htm
float parabola(float x, float k) {
    return pow(4.0*x*(1.0-x), k);
}

float movement(float x) {
	return sin(x * 2.0) + cos(x * 0.8 + 0.8);
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
	MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0),vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0),vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0),vec4(0.0, 0.0, 0.0, 1.0));
}

void fragment() {
	// float y = step(0.7, UV.y);
	float moveX = max(0.2, movement(UV.x * 5.0 + TIME * 2.0));
	float x = parabola(UV.x,1.0);
	float y = smoothstep(0.1, 1.0, UV.y);
	float y1 = 1.0 - smoothstep(0.9, 1.0, UV.y);
	ALBEDO = albedo.rgb;
	ALPHA = y * y1 * x * moveX * albedo.a;
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/albedo = Color( 0.0352941, 1, 0.164706, 0 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )

[sub_resource type="QuadMesh" id=5]
size = Vector2( 2, 2 )

[sub_resource type="Shader" id=6]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_burley, specular_schlick_ggx, unshaded, shadows_disabled;
uniform vec4 albedo : hint_color;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

//  Function from Iñigo Quiles
//  www.iquilezles.org/www/articles/functions/functions.htm
float parabola(float x, float k) {
    return pow(4.0*x*(1.0-x), k);
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat4(CAMERA_MATRIX[0],CAMERA_MATRIX[1],CAMERA_MATRIX[2],WORLD_MATRIX[3]);
	MODELVIEW_MATRIX = MODELVIEW_MATRIX * mat4(vec4(length(WORLD_MATRIX[0].xyz), 0.0, 0.0, 0.0),vec4(0.0, length(WORLD_MATRIX[1].xyz), 0.0, 0.0),vec4(0.0, 0.0, length(WORLD_MATRIX[2].xyz), 0.0),vec4(0.0, 0.0, 0.0, 1.0));
}

void fragment() {
	
	ALBEDO = albedo.rgb;
	float y = smoothstep(0, 0.3, UV.y);
	ALPHA = albedo.a * parabola(UV.x, 1) * y;
}
"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/albedo = Color( 0.266667, 0.796078, 0.188235, 0 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )

[sub_resource type="Animation" id=4]
resource_name = "heal"
tracks/0/type = "value"
tracks/0/path = NodePath("LightStroke:material/0:shader_param/albedo")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 0.0352941, 1, 0.164706, 0 ), Color( 0.0352941, 1, 0.164706, 1 ), Color( 0.0352941, 1, 0.164706, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Glow:material/0:shader_param/albedo")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 0.266667, 0.796078, 0.188235, 0 ), Color( 0.266667, 0.796078, 0.188235, 1 ), Color( 0.266667, 0.796078, 0.188235, 0 ) ]
}

[node name="Heal" type="Spatial"]

[node name="LightStroke" type="MeshInstance" parent="."]
transform = Transform( 2, 0, 0, 0, 8, 0, 0, 0, 1, 0, 4, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 3 )

[node name="Glow" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )
mesh = SubResource( 5 )
material/0 = SubResource( 7 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/heal = SubResource( 4 )
