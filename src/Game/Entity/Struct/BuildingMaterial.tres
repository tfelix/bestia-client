[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded, world_vertex_coords;

uniform vec4 mainColor: hint_color;
uniform float barSpeed = 4;
uniform float barDistance = 12;
uniform float alpha = 0.5;
uniform float rimTint;
uniform float rimPower;
uniform float glowSpeed = 0.8;
uniform float glowDistance = 0.8;

// Code adapted and ported from https://github.com/grizeldi/HoloShader
float rand(float n){
    return fract(sin(n) * 43758.5453123);
}

float noise(float p){
    float fl = floor(p);
    float fc = fract(p);
    return mix(rand(fl), rand(fl + 1.0), fc);
}

void fragment() {
	float val = TIME * barSpeed + VERTEX.y * barDistance;
	float bars = step(val - floor(val), 0.5) * 0.65;

	//Rim lighting
	RIM = rimPower;
	RIM_TINT = rimTint;

	//Glow
	float glow = 0.0;
	float tempGlow = VERTEX.y * glowDistance - TIME * glowSpeed;
	glow = tempGlow - floor(tempGlow);
    
	vec4 texColor = vec4(1.0);
    vec4 color = texColor * mainColor + (glow * 0.35 * mainColor);
    ALPHA = texColor.a * alpha * (bars + glow);
    ALBEDO = color.rgb;
}"
custom_defines = "#define MAX_LIGHT_DATA_STRUCTS 409
#define MAX_FORWARD_LIGHTS 8
#define MAX_REFLECTION_DATA_STRUCTS 455
#define MAX_SKELETON_BONES 1365
"

[resource]
shader = SubResource( 1 )
shader_param/mainColor = Color( 0.0823529, 0.929412, 0.176471, 1 )
shader_param/barSpeed = 4.0
shader_param/barDistance = 12.0
shader_param/alpha = 0.5
shader_param/rimTint = 0.3
shader_param/rimPower = 3.0
shader_param/glowSpeed = 0.8
shader_param/glowDistance = 0.8
