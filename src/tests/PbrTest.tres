[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://tests/brown_rock_04/Brown_rock_04_2K_Base_Color.png" type="Texture" id=1]
[ext_resource path="res://tests/brown_rock_04/Brown_rock_04_2K_AO.png" type="Texture" id=2]
[ext_resource path="res://tests/brown_rock_04/Brown_rock_04_2K_Normal.png" type="Texture" id=3]
[ext_resource path="res://tests/brown_rock_04/Brown_rock_04_2K_Roughness.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,world_vertex_coords, unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform sampler2D texture_ambient_occlusion : hint_white;
uniform vec4 ao_texture_channel;
uniform float ao_light_affect;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
varying vec3 normal_dir;

void vertex() {
	normal_dir = normalize(NORMAL);
}

vec4 triplanar_texture_color(vec3 normal) {
	vec3 samp=vec3(0.0);
	// samp+=vec3(1.0, 0.0, 0.0) * abs(dot(normal, vec3(1.0, 0.0, 0.0))); // x
	// samp+=vec3(0.0, 1.0, 0.0) * clamp(dot(normal, vec3(0.0, 1.0, 0.0)), 0.2, 1.0); // y
	float clamp_val = 0.55;
	float weight_z = abs(dot(normal, vec3(0.0, 0.0, 1.0)));
	if(weight_z > clamp_val) {
		samp += vec3(0.0, 0.0, 1.0) * weight_z;
	}
	
	float weight_y = abs(dot(normal, vec3(0.0, 1.0, 0.0)));
	if(weight_y > clamp_val) {
		samp += vec3(1.0, 0.0, 0.0) * weight_y;
	}
	
	float weight_x = abs(dot(normal, vec3(1.0, 0.0, 0.0)));
	if(weight_x > clamp_val) {
		samp += vec3(0.0, 1.0, 0.0) * weight_x;
	}
	
	// samp+=vec4(0.0, 1.0, 0.0, 1.0) * p_weights.y;
	// samp+=vec4(0.0, 0.0, 1.0, 1.0) * p_weights.x;
	// samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	// samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	// samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return vec4(samp.x, samp.y, samp.z, 1.0);
}


void fragment() {
	ALBEDO = triplanar_texture_color(normal_dir).xyz;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.5
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 0.333333, 0.333333, 0.333333, 0 )
shader_param/normal_scale = 1.0
shader_param/ao_texture_channel = Plane( 0.333333, 0.333333, 0.333333, 0 )
shader_param/ao_light_affect = 0.2
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_roughness = ExtResource( 4 )
shader_param/texture_normal = ExtResource( 3 )
shader_param/texture_ambient_occlusion = ExtResource( 2 )
