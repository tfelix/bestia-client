[gd_scene load_steps=4 format=2]

[ext_resource path="res://Terrain/GrassLump/GrassLump.mesh" type="ArrayMesh" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float max_rotation: hint_range(0, 0.3) = 0.2;

const float PI2 = 2.0 * 3.14;

vec3 rotateAboutAxis(vec3 v, float angle, vec3 normalized_axis, vec3 pivot) {
	vec3 shifted_v = v - pivot; 
	
	shifted_v = shifted_v * cos(angle) + cross(normalized_axis, shifted_v) * sin(angle) 
		+ normalized_axis * (dot(normalized_axis, shifted_v)) * (1.0 - cos(angle));
	
	return shifted_v + pivot;
}

void vertex() {
	vec3 vertex_world = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
	vec3 mesh_world = (WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	
	vec2 displ = vec2(-1.0, 0.0);
	// vec2 displ = texture(displacement_map, mesh_world_uv).rg;

	float rotation_angle = length(displ) * max_rotation;
	float rotation_angle_rad = PI2 * rotation_angle;
	
	float pivot_offset = 0.1;
	vec3 mesh_top_world = (WORLD_MATRIX * vec4(0.0, 1.0, 0.0, 1.0)).xyz;
	vec3 pivot_point =  vec3(0., 0., 0.); 
	// vec3 pivot_point = vertex_world - mesh_top_world * pivot_offset;
	
	vec3 rotation_axis = normalize(cross(vec3(displ, 0.0), vec3(0.0, -1.0, 0.0)));
	
	rotation_angle_rad = rotation_angle_rad * COLOR.r;
	vec3 rotated = rotateAboutAxis(vertex_world, rotation_angle_rad, rotation_axis, pivot_point);
	
	VERTEX = (inverse(WORLD_MATRIX) * vec4(rotated, 1.0)).xyz;
}

void fragment() {
	vec2 base_uv = UV;
	ALBEDO = albedo.rgb * COLOR.r;
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.137255, 0.733333, 0.133333, 1 )
shader_param/max_rotation = 0.123

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = ExtResource( 1 )
material/0 = SubResource( 2 )
