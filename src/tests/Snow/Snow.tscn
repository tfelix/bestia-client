[gd_scene load_steps=7 format=2]

[ext_resource path="res://Terrain/bricks_01/Ground_01_Nrm.png" type="Texture" id=1]
[ext_resource path="res://Terrain/bricks_01/Ground_01.png" type="Texture" id=2]

[sub_resource type="SphereMesh" id=1]

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,world_vertex_coords;

uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;

uniform float snow_opacity : hint_range(0,1) = 1.0;
uniform vec3 snow_direction = vec3(0,1,0);

uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;

const vec3 UP = vec3(0, 1, 0);
varying float snow_amount;
varying float snow_wall_amount;

float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}


vec4 Unity_Remap(vec4 In, vec2 InMinMax, vec2 OutMinMax)
{
   return OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,-1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,-1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	
	// Calculate UV2 in world space to apply the snow.
	UV2 = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xz;
	
	snow_amount = clamp(dot(NORMAL, snow_direction), 0.0, 1.0);
	snow_wall_amount = clamp(dot(NORMAL, UP), 0.0, 1.0);
}


void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	
	// TODO Add gradient noise here
	vec3 snow_albedo = Unity_Remap(vec4(rand(UV2)), vec2(0, 1), vec2(0.8, 1.0)).xyz;
	vec3 snow_layer = snow_albedo * snow_amount * snow_wall_amount * snow_opacity;
	
	ALBEDO = albedo_tex.rgb + snow_layer;
	
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	NORMALMAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMALMAP_DEPTH = normal_scale;
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/snow_opacity = 1.0
shader_param/snow_direction = Vector3( 0, 1, 0 )
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/normal_scale = 1.0
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 2 )
shader_param/texture_normal = ExtResource( 1 )

[sub_resource type="Environment" id=3]
ambient_light_color = Color( 1, 1, 1, 1 )

[node name="Snow" type="Spatial"]

[node name="Sphere" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.00275081, 0, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 5 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 3 )
