[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://tests/handpainted-style-textures-3/hp_03.png" type="Texture" id=1]
[ext_resource path="res://tests/handpainted-style-textures-3/hp_02_s.png" type="Texture" id=2]
[ext_resource path="res://tests/handpainted-style-textures-3/hp_03_n.png" type="Texture" id=3]
[ext_resource path="res://tests/handpainted-style-textures-3/hp_03_r.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,world_vertex_coords, unshaded;

uniform sampler2D albedo_z;
uniform sampler2D metallic_z;
uniform sampler2D rough_z;
uniform sampler2D normal_z;

varying vec3 normal_dir;

void vertex() {
	normal_dir = normalize(NORMAL);
}

vec3 triplanar_weights(vec3 normal) {
	float weight_z = abs(dot(normal, vec3(0.0, 0.0, 1.0)));	
	float weight_y = abs(dot(normal, vec3(0.0, 1.0, 0.0)));
	float weight_x = abs(dot(normal, vec3(1.0, 0.0, 0.0)));
	
	return vec3(weight_x, weight_y, weight_z);
}

vec4 triplanar_texture_color(vec3 normal) {
	vec3 samp=vec3(0.0);
	float clamp_val = 0.55;
	float weight_z = abs(dot(normal, vec3(0.0, 0.0, 1.0)));
	if(weight_z > clamp_val) {
		samp += vec3(0.0, 0.0, 1.0) * weight_z;
	}
	
	float weight_y = abs(dot(normal, vec3(0.0, 1.0, 0.0)));
	if(weight_y > clamp_val) {
		samp += vec3(1.0, 0.0, 0.0) * weight_y;
	}
	
	float weight_x = abs(dot(normal, vec3(1.0, 0.0, 0.0)));
	if(weight_x > clamp_val) {
		samp += vec3(0.0, 1.0, 0.0) * weight_x;
	}
	
	return vec4(samp.x, samp.y, samp.z, 1.0);
}


void fragment() {
	vec3 weights = triplanar_weights(normal_dir);
	
	vec3 albedo = texture(albedo_z, UV).rgb * weights.z;
	ALBEDO = albedo; // triplanar_texture_color(normal_dir).xyz;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo_z = ExtResource( 1 )
shader_param/metallic_z = ExtResource( 2 )
shader_param/rough_z = ExtResource( 4 )
shader_param/normal_z = ExtResource( 3 )
