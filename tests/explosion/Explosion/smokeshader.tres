[gd_resource type="VisualShader" load_steps=26 format=2]

[ext_resource path="res://smokesprite.png" type="Texture" id=1]
[ext_resource path="res://normal+.png" type="Texture" id=2]
[ext_resource path="res://normal-.png" type="Texture" id=3]

[sub_resource type="VisualShaderNodeColorFunc" id=1]

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "emission_color_ramp"
texture_type = 1

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 5, 5, 5 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 0.0, 1, 0.3 ]

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "emission_falloff_multiplier"

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=8]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeVectorOp" id=9]
operator = 1

[sub_resource type="VisualShaderNodeTexture" id=10]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeTextureUniform" id=12]
uniform_name = "emission_falloff"
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "color"

[sub_resource type="VisualShaderNodeExpression" id=14]
expression = "uv.z = 0.0;
uv.xy = vec2(color.y);"

[sub_resource type="VisualShaderNodeVectorInterp" id=16]

[sub_resource type="VisualShaderNodeTextureUniform" id=17]
uniform_name = "Smoke_color_ramp"
texture_type = 1

[sub_resource type="VisualShaderNodeExpression" id=18]
expression = "mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
//mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;

float h_frames = float(particles_anim_h_frames);
float v_frames = float(particles_anim_v_frames);
float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
float particle_frame = floor(INSTANCE_CUSTOM.y * float(particle_total_frames));
if (!particles_anim_loop) {
	particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
} else {
	particle_frame = mod(particle_frame, particle_total_frames);
}
UV /= vec2(h_frames, v_frames);
UV += vec2(mod(particle_frame, h_frames) / h_frames, floor(particle_frame / h_frames) / v_frames);
		
c=INSTANCE_CUSTOM.xyz;"

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "vertex"

[sub_resource type="VisualShaderNodeScalarUniform" id=20]
uniform_name = "particle_h_frames"

[sub_resource type="VisualShaderNodeScalarUniform" id=21]
uniform_name = "particle_v_frames"

[sub_resource type="VisualShaderNodeBooleanUniform" id=22]
uniform_name = "particles_anim_loop"

[sub_resource type="VisualShaderNodeInput" id=23]
input_name = "time"

[sub_resource type="VisualShaderNodeExpression" id=24]
expression = "v = INSTANCE_CUSTOM.xyz;"

[resource]
code = "shader_type spatial;
uniform float particle_h_frames;
uniform float particle_v_frames;
uniform bool particles_anim_loop;
uniform sampler2D tex_frg_2;uniform sampler2D Smoke_color_ramp : hint_albedo;
uniform float emission_falloff_multiplier;
uniform sampler2D emission_falloff : hint_albedo;
uniform sampler2D emission_color_ramp : hint_albedo;
uniform sampler2D tex_frg_16;uniform sampler2D tex_frg_17;


void vertex() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = VERTEX;

// ScalarUniform:5
	float n_out5p0;
	n_out5p0 = particle_h_frames;

// ScalarUniform:6
	float n_out6p0;
	n_out6p0 = particle_v_frames;

// BooleanUniform:7
	bool n_out7p0;
	n_out7p0 = particles_anim_loop;

// Input:8
	float n_out8p0;
	n_out8p0 = TIME;

// Expression:2
	vec3 n_out2p0;
	n_out2p0=vec3(0.0, 0.0, 0.0);
	{
		mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
		//mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
		MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;
		
		float h_frames = float(n_out5p0);
		float v_frames = float(n_out6p0);
		float particle_total_frames = float(n_out5p0 * n_out6p0);
		float particle_frame = floor(INSTANCE_CUSTOM.y * float(particle_total_frames));
		if (!n_out7p0) {
			particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
		} else {
			particle_frame = mod(particle_frame, particle_total_frames);
		}
		UV /= vec2(h_frames, v_frames);
		UV += vec2(mod(particle_frame, h_frames) / h_frames, floor(particle_frame / h_frames) / v_frames);
				
		n_out2p0=INSTANCE_CUSTOM.xyz;
	}
// Output:0
	COLOR.rgb = n_out2p0;

}

void fragment() {
// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	vec4 tex_frg_2_read = texture( tex_frg_2 , UV.xy );
	n_out2p0 = tex_frg_2_read.rgb;
	n_out2p1 = tex_frg_2_read.a;

// ColorFunc:10
	vec3 n_out10p0;
	{
		vec3 c = n_out2p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out10p0 = vec3(max3, max3, max3);
	}

// TextureUniform:9
	vec3 n_out9p0;
	float n_out9p1;
	{
		vec4 n_tex_read = texture( Smoke_color_ramp , n_out10p0.xy );
		n_out9p0 = n_tex_read.rgb;
		n_out9p1 = n_tex_read.a;
	}

// ScalarUniform:15
	float n_out15p0;
	n_out15p0 = emission_falloff_multiplier;

// Input:5
	vec3 n_out5p0;
	n_out5p0 = COLOR.rgb;

// Expression:6
	vec3 n_out6p0;
	n_out6p0=vec3(0.0, 0.0, 0.0);
	{
		n_out6p0.z = 0.0;
		n_out6p0.xy = vec2(n_out5p0.y);
	}
// TextureUniform:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 n_tex_read = texture( emission_falloff , n_out6p0.xy );
		n_out4p0 = n_tex_read.rgb;
		n_out4p1 = n_tex_read.a;
	}

// ScalarOp:13
	float n_out13p0;
	n_out13p0 = n_out15p0 * dot(n_out4p0,vec3(0.333333,0.333333,0.333333));

// ScalarOp:14
	float n_out14p0;
	n_out14p0 = dot(n_out10p0,vec3(0.333333,0.333333,0.333333)) + n_out13p0;

// TextureUniform:11
	vec3 n_out11p0;
	float n_out11p1;
	{
		vec4 n_tex_read = texture( emission_color_ramp , vec3(n_out14p0).xy );
		n_out11p0 = n_tex_read.rgb;
		n_out11p1 = n_tex_read.a;
	}

// VectorOp:12
	vec3 n_in12p1 = vec3(5.00000,5.00000,5.00000);
	vec3 n_out12p0;
	n_out12p0 = n_out11p0 * n_in12p1;

// Texture:16
	vec3 n_out16p0;
	float n_out16p1;
	vec4 tex_frg_16_read = texture( tex_frg_16 , UV.xy );
	n_out16p0 = tex_frg_16_read.rgb;
	n_out16p1 = tex_frg_16_read.a;

// Texture:17
	vec3 n_out17p0;
	float n_out17p1;
	vec4 tex_frg_17_read = texture( tex_frg_17 , UV.xy );
	n_out17p0 = tex_frg_17_read.rgb;
	n_out17p1 = tex_frg_17_read.a;

// VectorOp:18
	vec3 n_out18p0;
	n_out18p0 = n_out16p0 - n_out17p0;

// Output:0
	ALBEDO = n_out9p0;
	ALPHA = n_out2p1;
	EMISSION = n_out12p0;
	NORMAL = n_out18p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1215, 22 )
nodes/vertex/0/position = Vector2( 500, 120 )
nodes/vertex/2/node = SubResource( 18 )
nodes/vertex/2/position = Vector2( -720, -140 )
nodes/vertex/2/size = Vector2( 727, 625 )
nodes/vertex/2/input_ports = "0,1,v;1,0,particles_anim_h_frames;2,0,particles_anim_v_frames;3,2,particles_anim_loop;4,0,time;"
nodes/vertex/2/output_ports = "0,1,c;"
nodes/vertex/2/expression = "mat4 mat_world = mat4(normalize(CAMERA_MATRIX[0])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[1])*length(WORLD_MATRIX[0]),normalize(CAMERA_MATRIX[2])*length(WORLD_MATRIX[2]),WORLD_MATRIX[3]);
//mat_world = mat_world * mat4( vec4(cos(INSTANCE_CUSTOM.x),-sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0),vec4(0.0, 0.0, 1.0, 0.0),vec4(0.0, 0.0, 0.0, 1.0));
MODELVIEW_MATRIX = INV_CAMERA_MATRIX * mat_world;

float h_frames = float(particles_anim_h_frames);
float v_frames = float(particles_anim_v_frames);
float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
float particle_frame = floor(INSTANCE_CUSTOM.y * float(particle_total_frames));
if (!particles_anim_loop) {
	particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
} else {
	particle_frame = mod(particle_frame, particle_total_frames);
}
UV /= vec2(h_frames, v_frames);
UV += vec2(mod(particle_frame, h_frames) / h_frames, floor(particle_frame / h_frames) / v_frames);
		
c=INSTANCE_CUSTOM.xyz;"
nodes/vertex/3/node = SubResource( 19 )
nodes/vertex/3/position = Vector2( -1200, -320 )
nodes/vertex/5/node = SubResource( 20 )
nodes/vertex/5/position = Vector2( -1080, -380 )
nodes/vertex/6/node = SubResource( 21 )
nodes/vertex/6/position = Vector2( -1140, -100 )
nodes/vertex/7/node = SubResource( 22 )
nodes/vertex/7/position = Vector2( -1020, 40 )
nodes/vertex/8/node = SubResource( 23 )
nodes/vertex/8/position = Vector2( -1060, -220 )
nodes/vertex/9/node = SubResource( 24 )
nodes/vertex/9/position = Vector2( 40, 200 )
nodes/vertex/9/size = Vector2( 250, 150 )
nodes/vertex/9/input_ports = ""
nodes/vertex/9/output_ports = "0,1,v;"
nodes/vertex/9/expression = "v = INSTANCE_CUSTOM.xyz;"
nodes/vertex/connections = PoolIntArray( 3, 0, 2, 0, 6, 0, 2, 2, 5, 0, 2, 1, 7, 0, 2, 3, 8, 0, 2, 4, 2, 0, 0, 6 )
nodes/fragment/0/position = Vector2( 700, 180 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( -1000, 40 )
nodes/fragment/4/node = SubResource( 12 )
nodes/fragment/4/position = Vector2( -480, 560 )
nodes/fragment/5/node = SubResource( 13 )
nodes/fragment/5/position = Vector2( -1220, 500 )
nodes/fragment/6/node = SubResource( 14 )
nodes/fragment/6/position = Vector2( -1060, 540 )
nodes/fragment/6/size = Vector2( 456, 182 )
nodes/fragment/6/input_ports = "0,1,color;"
nodes/fragment/6/output_ports = "0,1,uv;"
nodes/fragment/6/expression = "uv.z = 0.0;
uv.xy = vec2(color.y);"
nodes/fragment/8/node = SubResource( 16 )
nodes/fragment/8/position = Vector2( 80, 460 )
nodes/fragment/9/node = SubResource( 17 )
nodes/fragment/9/position = Vector2( -360, 0 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -740, 240 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -220, 220 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 80, 340 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -580, 400 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -400, 360 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -920, 340 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( 200, 600 )
nodes/fragment/17/node = SubResource( 8 )
nodes/fragment/17/position = Vector2( 240, 920 )
nodes/fragment/18/node = SubResource( 9 )
nodes/fragment/18/position = Vector2( 460, 740 )
nodes/fragment/connections = PoolIntArray( 2, 1, 0, 1, 6, 0, 4, 0, 5, 0, 6, 0, 2, 0, 10, 0, 10, 0, 9, 0, 9, 0, 0, 0, 11, 0, 12, 0, 4, 0, 13, 1, 10, 0, 14, 0, 14, 0, 11, 0, 15, 0, 13, 0, 13, 0, 14, 1, 12, 0, 0, 5, 16, 0, 18, 0, 17, 0, 18, 1, 18, 0, 0, 7 )
nodes/light/0/position = Vector2( 260, 120 )
